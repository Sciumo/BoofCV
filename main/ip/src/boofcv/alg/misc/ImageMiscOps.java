/*
 * Copyright (c) 2011-2012, Peter Abeles. All Rights Reserved.
 *
 * This file is part of BoofCV (http://boofcv.org).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package boofcv.alg.misc;

import boofcv.struct.image.*;

import java.util.Random;


/**
 * Basic image operations which have no place better to go.
 *
 * <p>DO NOT MODIFY: Generated by {@link boofcv.alg.misc.GenerateImageMiscOps}.</p>
 *
 * @author Peter Abeles
 */
public class ImageMiscOps {

	/**
	 * Fills the whole image with the specified pixel value
	 *
	 * @param img   An image.
	 * @param value The value that the image is being filled with.
	 */
	public static void fill(ImageInt8 img, int value) {
		final int h = img.getHeight();
		final int w = img.getWidth();

		byte[] data = img.data;

		for (int y = 0; y < h; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < w; x++) {
				data[index++] = (byte)value;
			}
		}
	}

	/**
	 * Sets a rectangle inside the image with the specified value.
	 */
	public static void fillRectangle(ImageInt8 img, int value, int x0, int y0, int width, int height) {
		int x1 = x0 + width;
		int y1 = y0 + height;

		for (int y = y0; y < y1; y++) {
			for (int x = x0; x < x1; x++) {
				if( img.isInBounds(x,y ))
					img.set(x, y, value);
			}
		}
	}

	/**
	 * Sets each value in the image to a value drawn from an uniform distribution that has a range of min <= X < max.
	 */
	public static void fillUniform(ImageInt8 img, Random rand , int min , int max) {
		int range = max-min;

		byte[] data = img.data;

		for (int y = 0; y < img.height; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < img.width; x++) {
				data[index++] = (byte)(rand.nextInt(range)+min);
			}
		}
	}

	/**
	 * Sets each value in the image to a value drawn from a Gaussian distribution
	 */
	public static void fillGaussian(ImageInt8 img, Random rand , double mean , double sigma , int lower , int upper ) {
		byte[] data = img.data;

		for (int y = 0; y < img.height; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < img.width; x++) {
				int value = (int)(rand.nextGaussian()*sigma+mean);
				if( value < lower ) value = lower;
				if( value > upper ) value = upper;
				data[index++] = (byte)value;
			}
		}
	}

	/**
	 * Flips the image from top to bottom
	 */
	public static void flipVertical( ImageInt8 img ) {
		int h2 = img.height/2;

		for( int y = 0; y < h2; y++ ) {
			int index1 = img.getStartIndex() + y * img.getStride();
			int index2 = img.getStartIndex() + (img.height - y - 1) * img.getStride();

			int end = index1 + img.width;

			while( index1 < end ) {
				int tmp = img.data[index1];
				img.data[index1++] = img.data[index2];
				img.data[index2++] = (byte)tmp;
			}
		}
	}

/**
	 * Fills the whole image with the specified pixel value
	 *
	 * @param img   An image.
	 * @param value The value that the image is being filled with.
	 */
	public static void fill(ImageInt16 img, int value) {
		final int h = img.getHeight();
		final int w = img.getWidth();

		short[] data = img.data;

		for (int y = 0; y < h; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < w; x++) {
				data[index++] = (short)value;
			}
		}
	}

	/**
	 * Sets a rectangle inside the image with the specified value.
	 */
	public static void fillRectangle(ImageInt16 img, int value, int x0, int y0, int width, int height) {
		int x1 = x0 + width;
		int y1 = y0 + height;

		for (int y = y0; y < y1; y++) {
			for (int x = x0; x < x1; x++) {
				if( img.isInBounds(x,y ))
					img.set(x, y, value);
			}
		}
	}

	/**
	 * Sets each value in the image to a value drawn from an uniform distribution that has a range of min <= X < max.
	 */
	public static void fillUniform(ImageInt16 img, Random rand , int min , int max) {
		int range = max-min;

		short[] data = img.data;

		for (int y = 0; y < img.height; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < img.width; x++) {
				data[index++] = (short)(rand.nextInt(range)+min);
			}
		}
	}

	/**
	 * Sets each value in the image to a value drawn from a Gaussian distribution
	 */
	public static void fillGaussian(ImageInt16 img, Random rand , double mean , double sigma , int lower , int upper ) {
		short[] data = img.data;

		for (int y = 0; y < img.height; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < img.width; x++) {
				int value = (int)(rand.nextGaussian()*sigma+mean);
				if( value < lower ) value = lower;
				if( value > upper ) value = upper;
				data[index++] = (short)value;
			}
		}
	}

	/**
	 * Flips the image from top to bottom
	 */
	public static void flipVertical( ImageInt16 img ) {
		int h2 = img.height/2;

		for( int y = 0; y < h2; y++ ) {
			int index1 = img.getStartIndex() + y * img.getStride();
			int index2 = img.getStartIndex() + (img.height - y - 1) * img.getStride();

			int end = index1 + img.width;

			while( index1 < end ) {
				int tmp = img.data[index1];
				img.data[index1++] = img.data[index2];
				img.data[index2++] = (short)tmp;
			}
		}
	}

/**
	 * Fills the whole image with the specified pixel value
	 *
	 * @param img   An image.
	 * @param value The value that the image is being filled with.
	 */
	public static void fill(ImageSInt32 img, int value) {
		final int h = img.getHeight();
		final int w = img.getWidth();

		int[] data = img.data;

		for (int y = 0; y < h; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < w; x++) {
				data[index++] = value;
			}
		}
	}

	/**
	 * Sets a rectangle inside the image with the specified value.
	 */
	public static void fillRectangle(ImageSInt32 img, int value, int x0, int y0, int width, int height) {
		int x1 = x0 + width;
		int y1 = y0 + height;

		for (int y = y0; y < y1; y++) {
			for (int x = x0; x < x1; x++) {
				if( img.isInBounds(x,y ))
					img.set(x, y, value);
			}
		}
	}

	/**
	 * Sets each value in the image to a value drawn from an uniform distribution that has a range of min <= X < max.
	 */
	public static void fillUniform(ImageSInt32 img, Random rand , int min , int max) {
		int range = max-min;

		int[] data = img.data;

		for (int y = 0; y < img.height; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < img.width; x++) {
				data[index++] = (rand.nextInt(range)+min);
			}
		}
	}

	/**
	 * Sets each value in the image to a value drawn from a Gaussian distribution
	 */
	public static void fillGaussian(ImageSInt32 img, Random rand , double mean , double sigma , int lower , int upper ) {
		int[] data = img.data;

		for (int y = 0; y < img.height; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < img.width; x++) {
				int value = (int)(rand.nextGaussian()*sigma+mean);
				if( value < lower ) value = lower;
				if( value > upper ) value = upper;
				data[index++] = value;
			}
		}
	}

	/**
	 * Flips the image from top to bottom
	 */
	public static void flipVertical( ImageSInt32 img ) {
		int h2 = img.height/2;

		for( int y = 0; y < h2; y++ ) {
			int index1 = img.getStartIndex() + y * img.getStride();
			int index2 = img.getStartIndex() + (img.height - y - 1) * img.getStride();

			int end = index1 + img.width;

			while( index1 < end ) {
				int tmp = img.data[index1];
				img.data[index1++] = img.data[index2];
				img.data[index2++] = (int)tmp;
			}
		}
	}

/**
	 * Fills the whole image with the specified pixel value
	 *
	 * @param img   An image.
	 * @param value The value that the image is being filled with.
	 */
	public static void fill(ImageSInt64 img, long value) {
		final int h = img.getHeight();
		final int w = img.getWidth();

		long[] data = img.data;

		for (int y = 0; y < h; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < w; x++) {
				data[index++] = value;
			}
		}
	}

	/**
	 * Sets a rectangle inside the image with the specified value.
	 */
	public static void fillRectangle(ImageSInt64 img, long value, int x0, int y0, int width, int height) {
		int x1 = x0 + width;
		int y1 = y0 + height;

		for (int y = y0; y < y1; y++) {
			for (int x = x0; x < x1; x++) {
				if( img.isInBounds(x,y ))
					img.set(x, y, value);
			}
		}
	}

	/**
	 * Sets each value in the image to a value drawn from an uniform distribution that has a range of min <= X < max.
	 */
	public static void fillUniform(ImageSInt64 img, Random rand , long min , long max) {
		long range = max-min;

		long[] data = img.data;

		for (int y = 0; y < img.height; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < img.width; x++) {
				data[index++] = rand.nextInt((int)range)+min;
			}
		}
	}

	/**
	 * Sets each value in the image to a value drawn from a Gaussian distribution
	 */
	public static void fillGaussian(ImageSInt64 img, Random rand , double mean , double sigma , long lower , long upper ) {
		long[] data = img.data;

		for (int y = 0; y < img.height; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < img.width; x++) {
				long value = (long)(rand.nextGaussian()*sigma+mean);
				if( value < lower ) value = lower;
				if( value > upper ) value = upper;
				data[index++] = value;
			}
		}
	}

	/**
	 * Flips the image from top to bottom
	 */
	public static void flipVertical( ImageSInt64 img ) {
		int h2 = img.height/2;

		for( int y = 0; y < h2; y++ ) {
			int index1 = img.getStartIndex() + y * img.getStride();
			int index2 = img.getStartIndex() + (img.height - y - 1) * img.getStride();

			int end = index1 + img.width;

			while( index1 < end ) {
				long tmp = img.data[index1];
				img.data[index1++] = img.data[index2];
				img.data[index2++] = (long)tmp;
			}
		}
	}

/**
	 * Fills the whole image with the specified pixel value
	 *
	 * @param img   An image.
	 * @param value The value that the image is being filled with.
	 */
	public static void fill(ImageFloat32 img, float value) {
		final int h = img.getHeight();
		final int w = img.getWidth();

		float[] data = img.data;

		for (int y = 0; y < h; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < w; x++) {
				data[index++] = value;
			}
		}
	}

	/**
	 * Sets a rectangle inside the image with the specified value.
	 */
	public static void fillRectangle(ImageFloat32 img, float value, int x0, int y0, int width, int height) {
		int x1 = x0 + width;
		int y1 = y0 + height;

		for (int y = y0; y < y1; y++) {
			for (int x = x0; x < x1; x++) {
				if( img.isInBounds(x,y ))
					img.set(x, y, value);
			}
		}
	}

	/**
	 * Sets each value in the image to a value drawn from an uniform distribution that has a range of min <= X < max.
	 */
	public static void fillUniform(ImageFloat32 img, Random rand , float min , float max) {
		float range = max-min;

		float[] data = img.data;

		for (int y = 0; y < img.height; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < img.width; x++) {
				data[index++] = rand.nextFloat()*range+min;
			}
		}
	}

	/**
	 * Sets each value in the image to a value drawn from a Gaussian distribution
	 */
	public static void fillGaussian(ImageFloat32 img, Random rand , double mean , double sigma , float lower , float upper ) {
		float[] data = img.data;

		for (int y = 0; y < img.height; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < img.width; x++) {
				float value = (float)(rand.nextGaussian()*sigma+mean);
				if( value < lower ) value = lower;
				if( value > upper ) value = upper;
				data[index++] = value;
			}
		}
	}

	/**
	 * Flips the image from top to bottom
	 */
	public static void flipVertical( ImageFloat32 img ) {
		int h2 = img.height/2;

		for( int y = 0; y < h2; y++ ) {
			int index1 = img.getStartIndex() + y * img.getStride();
			int index2 = img.getStartIndex() + (img.height - y - 1) * img.getStride();

			int end = index1 + img.width;

			while( index1 < end ) {
				float tmp = img.data[index1];
				img.data[index1++] = img.data[index2];
				img.data[index2++] = (float)tmp;
			}
		}
	}

/**
	 * Fills the whole image with the specified pixel value
	 *
	 * @param img   An image.
	 * @param value The value that the image is being filled with.
	 */
	public static void fill(ImageFloat64 img, double value) {
		final int h = img.getHeight();
		final int w = img.getWidth();

		double[] data = img.data;

		for (int y = 0; y < h; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < w; x++) {
				data[index++] = value;
			}
		}
	}

	/**
	 * Sets a rectangle inside the image with the specified value.
	 */
	public static void fillRectangle(ImageFloat64 img, double value, int x0, int y0, int width, int height) {
		int x1 = x0 + width;
		int y1 = y0 + height;

		for (int y = y0; y < y1; y++) {
			for (int x = x0; x < x1; x++) {
				if( img.isInBounds(x,y ))
					img.set(x, y, value);
			}
		}
	}

	/**
	 * Sets each value in the image to a value drawn from an uniform distribution that has a range of min <= X < max.
	 */
	public static void fillUniform(ImageFloat64 img, Random rand , double min , double max) {
		double range = max-min;

		double[] data = img.data;

		for (int y = 0; y < img.height; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < img.width; x++) {
				data[index++] = rand.nextDouble()*range+min;
			}
		}
	}

	/**
	 * Sets each value in the image to a value drawn from a Gaussian distribution
	 */
	public static void fillGaussian(ImageFloat64 img, Random rand , double mean , double sigma , double lower , double upper ) {
		double[] data = img.data;

		for (int y = 0; y < img.height; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < img.width; x++) {
				double value = (rand.nextGaussian()*sigma+mean);
				if( value < lower ) value = lower;
				if( value > upper ) value = upper;
				data[index++] = value;
			}
		}
	}

	/**
	 * Flips the image from top to bottom
	 */
	public static void flipVertical( ImageFloat64 img ) {
		int h2 = img.height/2;

		for( int y = 0; y < h2; y++ ) {
			int index1 = img.getStartIndex() + y * img.getStride();
			int index2 = img.getStartIndex() + (img.height - y - 1) * img.getStride();

			int end = index1 + img.width;

			while( index1 < end ) {
				double tmp = img.data[index1];
				img.data[index1++] = img.data[index2];
				img.data[index2++] = (double)tmp;
			}
		}
	}

	/**
	 * Adds uniform i.i.d noise to each pixel in the image.  Noise range is min <= X < max.
	 */
	public static void addUniform(ImageUInt8 img, Random rand , int min , int max) {
		final int h = img.getHeight();
		final int w = img.getWidth();

		int range = max-min;

		byte[] data = img.data;

		for (int y = 0; y < h; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < w; x++) {
				int value = (data[index] & 0xFF) + rand.nextInt(range)+min;
				if( value < 0 ) value = 0;
				if( value > 255 ) value = 255;

				data[index++] = (byte) value;
			}
		}
	}

	/**
	 * Adds Gaussian/normal i.i.d noise to each pixel in the image.
	 */
	public static void addGaussian(ImageUInt8 img, Random rand , double sigma , int min , int max ) {
		final int h = img.getHeight();
		final int w = img.getWidth();

		byte[] data = img.data;

		for (int y = 0; y < h; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < w; x++) {
				int value = (data[index] & 0xFF) + (int)(rand.nextGaussian()*sigma);
				if( value < min ) value = min;
				if( value > max ) value = max;

				data[index++] = (byte) value;
			}
		}
	}

	/**
	 * Adds uniform i.i.d noise to each pixel in the image.  Noise range is min <= X < max.
	 */
	public static void addUniform(ImageSInt8 img, Random rand , int min , int max) {
		final int h = img.getHeight();
		final int w = img.getWidth();

		int range = max-min;

		byte[] data = img.data;

		for (int y = 0; y < h; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < w; x++) {
				int value = (data[index] ) + rand.nextInt(range)+min;
				if( value < -128 ) value = -128;
				if( value > 127 ) value = 127;

				data[index++] = (byte) value;
			}
		}
	}

	/**
	 * Adds Gaussian/normal i.i.d noise to each pixel in the image.
	 */
	public static void addGaussian(ImageSInt8 img, Random rand , double sigma , int min , int max ) {
		final int h = img.getHeight();
		final int w = img.getWidth();

		byte[] data = img.data;

		for (int y = 0; y < h; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < w; x++) {
				int value = (data[index] ) + (int)(rand.nextGaussian()*sigma);
				if( value < min ) value = min;
				if( value > max ) value = max;

				data[index++] = (byte) value;
			}
		}
	}

	/**
	 * Adds uniform i.i.d noise to each pixel in the image.  Noise range is min <= X < max.
	 */
	public static void addUniform(ImageUInt16 img, Random rand , int min , int max) {
		final int h = img.getHeight();
		final int w = img.getWidth();

		int range = max-min;

		short[] data = img.data;

		for (int y = 0; y < h; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < w; x++) {
				int value = (data[index] & 0xFFFF) + rand.nextInt(range)+min;
				if( value < 0 ) value = 0;
				if( value > 65535 ) value = 65535;

				data[index++] = (short) value;
			}
		}
	}

	/**
	 * Adds Gaussian/normal i.i.d noise to each pixel in the image.
	 */
	public static void addGaussian(ImageUInt16 img, Random rand , double sigma , int min , int max ) {
		final int h = img.getHeight();
		final int w = img.getWidth();

		short[] data = img.data;

		for (int y = 0; y < h; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < w; x++) {
				int value = (data[index] & 0xFFFF) + (int)(rand.nextGaussian()*sigma);
				if( value < min ) value = min;
				if( value > max ) value = max;

				data[index++] = (short) value;
			}
		}
	}

	/**
	 * Adds uniform i.i.d noise to each pixel in the image.  Noise range is min <= X < max.
	 */
	public static void addUniform(ImageSInt16 img, Random rand , int min , int max) {
		final int h = img.getHeight();
		final int w = img.getWidth();

		int range = max-min;

		short[] data = img.data;

		for (int y = 0; y < h; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < w; x++) {
				int value = (data[index] ) + rand.nextInt(range)+min;
				if( value < -32768 ) value = -32768;
				if( value > 32767 ) value = 32767;

				data[index++] = (short) value;
			}
		}
	}

	/**
	 * Adds Gaussian/normal i.i.d noise to each pixel in the image.
	 */
	public static void addGaussian(ImageSInt16 img, Random rand , double sigma , int min , int max ) {
		final int h = img.getHeight();
		final int w = img.getWidth();

		short[] data = img.data;

		for (int y = 0; y < h; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < w; x++) {
				int value = (data[index] ) + (int)(rand.nextGaussian()*sigma);
				if( value < min ) value = min;
				if( value > max ) value = max;

				data[index++] = (short) value;
			}
		}
	}

	/**
	 * Adds uniform i.i.d noise to each pixel in the image.  Noise range is min <= X < max.
	 */
	public static void addUniform(ImageSInt32 img, Random rand , int min , int max) {
		final int h = img.getHeight();
		final int w = img.getWidth();

		int range = max-min;

		int[] data = img.data;

		for (int y = 0; y < h; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < w; x++) {
				int value = (data[index] ) + rand.nextInt(range)+min;
				data[index++] =  value;
			}
		}
	}

	/**
	 * Adds Gaussian/normal i.i.d noise to each pixel in the image.
	 */
	public static void addGaussian(ImageSInt32 img, Random rand , double sigma , int min , int max ) {
		final int h = img.getHeight();
		final int w = img.getWidth();

		int[] data = img.data;

		for (int y = 0; y < h; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < w; x++) {
				int value = (data[index] ) + (int)(rand.nextGaussian()*sigma);
				if( value < min ) value = min;
				if( value > max ) value = max;

				data[index++] =  value;
			}
		}
	}

	/**
	 * Adds uniform i.i.d noise to each pixel in the image.  Noise range is min <= X < max.
	 */
	public static void addUniform(ImageSInt64 img, Random rand , long min , long max) {
		final int h = img.getHeight();
		final int w = img.getWidth();

		long range = max-min;

		long[] data = img.data;

		for (int y = 0; y < h; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < w; x++) {
				long value = data[index] + rand.nextInt((int)range)+min;
				data[index++] =  value;
			}
		}
	}

	/**
	 * Adds Gaussian/normal i.i.d noise to each pixel in the image.
	 *
	 * @param img Input image.  Modified.
	 * @param rand Random number generator.
	 * @param sigma Distributions standard deviation.
	 * @param min Allowed lower bound
	 * @param max Allowed upper bound
	 */
	public static void addGaussian(ImageSInt64 img, Random rand , double sigma , long min , long max ) {
		final int h = img.getHeight();
		final int w = img.getWidth();

		long[] data = img.data;

		for (int y = 0; y < h; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < w; x++) {
				long value = (data[index] ) + (long)(rand.nextGaussian()*sigma);
				if( value < min ) value = min;
				if( value > max ) value = max;

				data[index++] =  value;
			}
		}
	}

	/**
	 * Adds uniform i.i.d noise to each pixel in the image.  Noise range is min <= X < max.
	 */
	public static void addUniform(ImageFloat32 img, Random rand , float min , float max) {
		final int h = img.getHeight();
		final int w = img.getWidth();

		float range = max-min;

		float[] data = img.data;

		for (int y = 0; y < h; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < w; x++) {
				float value = data[index] + rand.nextFloat()*range+min;
				data[index++] =  value;
			}
		}
	}

	/**
	 * Adds Gaussian/normal i.i.d noise to each pixel in the image.
	 */
	public static void addGaussian(ImageFloat32 img, Random rand , double sigma , float min , float max ) {
		final int h = img.getHeight();
		final int w = img.getWidth();

		float[] data = img.data;

		for (int y = 0; y < h; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < w; x++) {
				float value = (data[index] ) + (float)(rand.nextGaussian()*sigma);
				if( value < min ) value = min;
				if( value > max ) value = max;

				data[index++] =  value;
			}
		}
	}

	/**
	 * Adds uniform i.i.d noise to each pixel in the image.  Noise range is min <= X < max.
	 */
	public static void addUniform(ImageFloat64 img, Random rand , double min , double max) {
		final int h = img.getHeight();
		final int w = img.getWidth();

		double range = max-min;

		double[] data = img.data;

		for (int y = 0; y < h; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < w; x++) {
				double value = data[index] + rand.nextDouble()*range+min;
				data[index++] =  value;
			}
		}
	}

	/**
	 * Adds Gaussian/normal i.i.d noise to each pixel in the image.
	 */
	public static void addGaussian(ImageFloat64 img, Random rand , double sigma , double min , double max ) {
		final int h = img.getHeight();
		final int w = img.getWidth();

		double[] data = img.data;

		for (int y = 0; y < h; y++) {
			int index = img.getStartIndex() + y * img.getStride();
			for (int x = 0; x < w; x++) {
				double value = (data[index] ) + (rand.nextGaussian()*sigma);
				if( value < min ) value = min;
				if( value > max ) value = max;

				data[index++] =  value;
			}
		}
	}

}
