/*
 * Copyright (c) 2011-2013, Peter Abeles. All Rights Reserved.
 *
 * This file is part of BoofCV (http://boofcv.org).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package boofcv.alg.filter.binary;

import boofcv.alg.InputSanityCheck;
import boofcv.alg.filter.binary.impl.ImplBinaryBlobLabeling;
import boofcv.misc.BoofMiscOps;
import boofcv.struct.image.*;

/**
 * <p>
 * Operations for thresholding images and converting them into a binary image or labeled binary images.
 * </p>
 *
 * <p>
 * WARNING: Do not modify.  Automatically generated by {@link boofcv.alg.filter.binary.GenerateThresholdImageOps}.
 * </p>
 *
 * @author Peter Abeles
 */
public class ThresholdImageOps {

	/**
	 * Applies a global threshold across the whole image.  Pixels which are
	 * considered in the set defined by the threshold are set to 1, all others
	 * are set to zero.  If the down flag is set to true then the inlier set
	 * is defined as <= to the the threshold and >= if true.
	 *
	 * @param input Input image. Not modified.
	 * @param output Binary output image. If null a new image will be declared. Modified.
	 * @param threshold threshold value.
	 * @param down If true inliers are below the threshold and false they are above the threshold.
	 * @return Output image.
	 */
	public static ImageUInt8 threshold( ImageFloat32 input , ImageUInt8 output ,
										float threshold , boolean down )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageUInt8.class);

		if( down ) {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]) <= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		} else {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]) >= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		}

		return output;
	}

	/**
	 * <p>
	 * Marks which labeled blobs are contained within the inlier set.  If a blob
	 * is inside the inlier set then its element in the 'results' array is set to its own ID number.  Otherwise
	 * that element is set to zero.
	 * </p>
	 * 
	 * @param input Original input image with intensity values.  Not modified.
	 * @param labeled Labeled binary image.
	 * @param results Where the inlier blobs are indicated.
	 * @param numBlobs The number of blobs.
	 * @param threshold Threshold used to define inlier set.
	 * @param down If the threshold is up or down.
	 */
	public static void thresholdBlobs( ImageFloat32 input , ImageSInt32 labeled ,
									   int results[] , int numBlobs , 
									   float threshold , boolean down ) {
		for( int i = 0; i < numBlobs; i++ ) {
			results[i] = 0;
		}
		
		if( down ) {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexWork = labeled.startIndex + y*labeled.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexWork++ ) {
					if( (input.data[indexIn]) <= threshold ) {
						int val = labeled.data[indexWork];
						results[val] = val;
					}
				}
			}
		} else {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexWork = labeled.startIndex + y*labeled.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexWork++ ) {
					if( (input.data[indexIn]) >= threshold ) {
						int val = labeled.data[indexWork];
						results[val] = val;
					}
				}
			}
		}
	}

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-4 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel4( ImageFloat32 input , ImageSInt32 output ,
										float lowerThreshold , float upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];
		int numBlobs;

		if( down ) {
			threshold(input,work,upperThreshold,true);
			numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
		} else {
			threshold(input,work,lowerThreshold,false);
			numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
		}

		ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
		BinaryImageOps.relabel(output,relabel);

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-8 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel8( ImageFloat32 input , ImageSInt32 output ,
										float lowerThreshold , float upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];
		int numBlobs;

		if( down ) {
			threshold(input,work,upperThreshold,true);
			numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
		} else {
			threshold(input,work,lowerThreshold,false);
			numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
		}

		ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
		BinaryImageOps.relabel(output,relabel);

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}

	/**
	 * Applies a global threshold across the whole image.  Pixels which are
	 * considered in the set defined by the threshold are set to 1, all others
	 * are set to zero.  If the down flag is set to true then the inlier set
	 * is defined as <= to the the threshold and >= if true.
	 *
	 * @param input Input image. Not modified.
	 * @param output Binary output image. If null a new image will be declared. Modified.
	 * @param threshold threshold value.
	 * @param down If true inliers are below the threshold and false they are above the threshold.
	 * @return Output image.
	 */
	public static ImageUInt8 threshold( ImageFloat64 input , ImageUInt8 output ,
										double threshold , boolean down )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageUInt8.class);

		if( down ) {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]) <= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		} else {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]) >= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		}

		return output;
	}

	/**
	 * <p>
	 * Marks which labeled blobs are contained within the inlier set.  If a blob
	 * is inside the inlier set then its element in the 'results' array is set to its own ID number.  Otherwise
	 * that element is set to zero.
	 * </p>
	 * 
	 * @param input Original input image with intensity values.  Not modified.
	 * @param labeled Labeled binary image.
	 * @param results Where the inlier blobs are indicated.
	 * @param numBlobs The number of blobs.
	 * @param threshold Threshold used to define inlier set.
	 * @param down If the threshold is up or down.
	 */
	public static void thresholdBlobs( ImageFloat64 input , ImageSInt32 labeled ,
									   int results[] , int numBlobs , 
									   double threshold , boolean down ) {
		for( int i = 0; i < numBlobs; i++ ) {
			results[i] = 0;
		}
		
		if( down ) {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexWork = labeled.startIndex + y*labeled.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexWork++ ) {
					if( (input.data[indexIn]) <= threshold ) {
						int val = labeled.data[indexWork];
						results[val] = val;
					}
				}
			}
		} else {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexWork = labeled.startIndex + y*labeled.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexWork++ ) {
					if( (input.data[indexIn]) >= threshold ) {
						int val = labeled.data[indexWork];
						results[val] = val;
					}
				}
			}
		}
	}

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-4 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel4( ImageFloat64 input , ImageSInt32 output ,
										double lowerThreshold , double upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];

		if( down ) {
			threshold(input,work,upperThreshold,true);
			int numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
			ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
			BinaryImageOps.relabel(output,relabel);
		} else {
			threshold(input,work,lowerThreshold,false);
			int numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
			BinaryImageOps.relabel(output,relabel);
		}

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-8 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel8( ImageFloat64 input , ImageSInt32 output ,
										double lowerThreshold , double upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];

		if( down ) {
			threshold(input,work,upperThreshold,true);
			int numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
			ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
			BinaryImageOps.relabel(output,relabel);
		} else {
			threshold(input,work,lowerThreshold,false);
			int numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
			BinaryImageOps.relabel(output,relabel);
		}

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}

	/**
	 * Applies a global threshold across the whole image.  Pixels which are
	 * considered in the set defined by the threshold are set to 1, all others
	 * are set to zero.  If the down flag is set to true then the inlier set
	 * is defined as <= to the the threshold and >= if true.
	 *
	 * @param input Input image. Not modified.
	 * @param output Binary output image. If null a new image will be declared. Modified.
	 * @param threshold threshold value.
	 * @param down If true inliers are below the threshold and false they are above the threshold.
	 * @return Output image.
	 */
	public static ImageUInt8 threshold( ImageUInt8 input , ImageUInt8 output ,
										int threshold , boolean down )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageUInt8.class);

		if( down ) {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]& 0xFF) <= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		} else {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]& 0xFF) >= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		}

		return output;
	}

	/**
	 * <p>
	 * Marks which labeled blobs are contained within the inlier set.  If a blob
	 * is inside the inlier set then its element in the 'results' array is set to its own ID number.  Otherwise
	 * that element is set to zero.
	 * </p>
	 * 
	 * @param input Original input image with intensity values.  Not modified.
	 * @param labeled Labeled binary image.
	 * @param results Where the inlier blobs are indicated.
	 * @param numBlobs The number of blobs.
	 * @param threshold Threshold used to define inlier set.
	 * @param down If the threshold is up or down.
	 */
	public static void thresholdBlobs( ImageUInt8 input , ImageSInt32 labeled ,
									   int results[] , int numBlobs , 
									   int threshold , boolean down ) {
		for( int i = 0; i < numBlobs; i++ ) {
			results[i] = 0;
		}
		
		if( down ) {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexWork = labeled.startIndex + y*labeled.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexWork++ ) {
					if( (input.data[indexIn]& 0xFF) <= threshold ) {
						int val = labeled.data[indexWork];
						results[val] = val;
					}
				}
			}
		} else {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexWork = labeled.startIndex + y*labeled.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexWork++ ) {
					if( (input.data[indexIn]& 0xFF) >= threshold ) {
						int val = labeled.data[indexWork];
						results[val] = val;
					}
				}
			}
		}
	}

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-4 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel4( ImageUInt8 input , ImageSInt32 output ,
										int lowerThreshold , int upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];

		if( down ) {
			threshold(input,work,upperThreshold,true);
			int numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
			ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
			BinaryImageOps.relabel(output,relabel);
		} else {
			threshold(input,work,lowerThreshold,false);
			int numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
			BinaryImageOps.relabel(output,relabel);
		}

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-8 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel8( ImageUInt8 input , ImageSInt32 output ,
										int lowerThreshold , int upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];

		if( down ) {
			threshold(input,work,upperThreshold,true);
			int numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
			ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
			BinaryImageOps.relabel(output,relabel);
		} else {
			threshold(input,work,lowerThreshold,false);
			int numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
			BinaryImageOps.relabel(output,relabel);
		}

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}

	/**
	 * Applies a global threshold across the whole image.  Pixels which are
	 * considered in the set defined by the threshold are set to 1, all others
	 * are set to zero.  If the down flag is set to true then the inlier set
	 * is defined as <= to the the threshold and >= if true.
	 *
	 * @param input Input image. Not modified.
	 * @param output Binary output image. If null a new image will be declared. Modified.
	 * @param threshold threshold value.
	 * @param down If true inliers are below the threshold and false they are above the threshold.
	 * @return Output image.
	 */
	public static ImageUInt8 threshold( ImageSInt16 input , ImageUInt8 output ,
										int threshold , boolean down )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageUInt8.class);

		if( down ) {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]) <= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		} else {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]) >= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		}

		return output;
	}

	/**
	 * <p>
	 * Marks which labeled blobs are contained within the inlier set.  If a blob
	 * is inside the inlier set then its element in the 'results' array is set to its own ID number.  Otherwise
	 * that element is set to zero.
	 * </p>
	 * 
	 * @param input Original input image with intensity values.  Not modified.
	 * @param labeled Labeled binary image.
	 * @param results Where the inlier blobs are indicated.
	 * @param numBlobs The number of blobs.
	 * @param threshold Threshold used to define inlier set.
	 * @param down If the threshold is up or down.
	 */
	public static void thresholdBlobs( ImageSInt16 input , ImageSInt32 labeled ,
									   int results[] , int numBlobs , 
									   int threshold , boolean down ) {
		for( int i = 0; i < numBlobs; i++ ) {
			results[i] = 0;
		}
		
		if( down ) {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexWork = labeled.startIndex + y*labeled.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexWork++ ) {
					if( (input.data[indexIn]) <= threshold ) {
						int val = labeled.data[indexWork];
						results[val] = val;
					}
				}
			}
		} else {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexWork = labeled.startIndex + y*labeled.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexWork++ ) {
					if( (input.data[indexIn]) >= threshold ) {
						int val = labeled.data[indexWork];
						results[val] = val;
					}
				}
			}
		}
	}

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-4 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel4( ImageSInt16 input , ImageSInt32 output ,
										int lowerThreshold , int upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];

		if( down ) {
			threshold(input,work,upperThreshold,true);
			int numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
			ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
			BinaryImageOps.relabel(output,relabel);
		} else {
			threshold(input,work,lowerThreshold,false);
			int numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
			BinaryImageOps.relabel(output,relabel);
		}

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-8 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel8( ImageSInt16 input , ImageSInt32 output ,
										int lowerThreshold , int upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];

		if( down ) {
			threshold(input,work,upperThreshold,true);
			int numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
			ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
			BinaryImageOps.relabel(output,relabel);
		} else {
			threshold(input,work,lowerThreshold,false);
			int numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
			BinaryImageOps.relabel(output,relabel);
		}

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}

	/**
	 * Applies a global threshold across the whole image.  Pixels which are
	 * considered in the set defined by the threshold are set to 1, all others
	 * are set to zero.  If the down flag is set to true then the inlier set
	 * is defined as <= to the the threshold and >= if true.
	 *
	 * @param input Input image. Not modified.
	 * @param output Binary output image. If null a new image will be declared. Modified.
	 * @param threshold threshold value.
	 * @param down If true inliers are below the threshold and false they are above the threshold.
	 * @return Output image.
	 */
	public static ImageUInt8 threshold( ImageUInt16 input , ImageUInt8 output ,
										int threshold , boolean down )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageUInt8.class);

		if( down ) {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]& 0xFFFF) <= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		} else {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]& 0xFFFF) >= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		}

		return output;
	}

	/**
	 * <p>
	 * Marks which labeled blobs are contained within the inlier set.  If a blob
	 * is inside the inlier set then its element in the 'results' array is set to its own ID number.  Otherwise
	 * that element is set to zero.
	 * </p>
	 * 
	 * @param input Original input image with intensity values.  Not modified.
	 * @param labeled Labeled binary image.
	 * @param results Where the inlier blobs are indicated.
	 * @param numBlobs The number of blobs.
	 * @param threshold Threshold used to define inlier set.
	 * @param down If the threshold is up or down.
	 */
	public static void thresholdBlobs( ImageUInt16 input , ImageSInt32 labeled ,
									   int results[] , int numBlobs , 
									   int threshold , boolean down ) {
		for( int i = 0; i < numBlobs; i++ ) {
			results[i] = 0;
		}
		
		if( down ) {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexWork = labeled.startIndex + y*labeled.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexWork++ ) {
					if( (input.data[indexIn]& 0xFFFF) <= threshold ) {
						int val = labeled.data[indexWork];
						results[val] = val;
					}
				}
			}
		} else {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexWork = labeled.startIndex + y*labeled.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexWork++ ) {
					if( (input.data[indexIn]& 0xFFFF) >= threshold ) {
						int val = labeled.data[indexWork];
						results[val] = val;
					}
				}
			}
		}
	}

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-4 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel4( ImageUInt16 input , ImageSInt32 output ,
										int lowerThreshold , int upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];

		if( down ) {
			threshold(input,work,upperThreshold,true);
			int numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
			ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
			BinaryImageOps.relabel(output,relabel);
		} else {
			threshold(input,work,lowerThreshold,false);
			int numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
			BinaryImageOps.relabel(output,relabel);
		}

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-8 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel8( ImageUInt16 input , ImageSInt32 output ,
										int lowerThreshold , int upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];

		if( down ) {
			threshold(input,work,upperThreshold,true);
			int numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
			ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
			BinaryImageOps.relabel(output,relabel);
		} else {
			threshold(input,work,lowerThreshold,false);
			int numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
			BinaryImageOps.relabel(output,relabel);
		}

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}

	/**
	 * Applies a global threshold across the whole image.  Pixels which are
	 * considered in the set defined by the threshold are set to 1, all others
	 * are set to zero.  If the down flag is set to true then the inlier set
	 * is defined as <= to the the threshold and >= if true.
	 *
	 * @param input Input image. Not modified.
	 * @param output Binary output image. If null a new image will be declared. Modified.
	 * @param threshold threshold value.
	 * @param down If true inliers are below the threshold and false they are above the threshold.
	 * @return Output image.
	 */
	public static ImageUInt8 threshold( ImageSInt32 input , ImageUInt8 output ,
										int threshold , boolean down )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageUInt8.class);

		if( down ) {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]) <= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		} else {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]) >= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		}

		return output;
	}

	/**
	 * <p>
	 * Marks which labeled blobs are contained within the inlier set.  If a blob
	 * is inside the inlier set then its element in the 'results' array is set to its own ID number.  Otherwise
	 * that element is set to zero.
	 * </p>
	 * 
	 * @param input Original input image with intensity values.  Not modified.
	 * @param labeled Labeled binary image.
	 * @param results Where the inlier blobs are indicated.
	 * @param numBlobs The number of blobs.
	 * @param threshold Threshold used to define inlier set.
	 * @param down If the threshold is up or down.
	 */
	public static void thresholdBlobs( ImageSInt32 input , ImageSInt32 labeled ,
									   int results[] , int numBlobs , 
									   int threshold , boolean down ) {
		for( int i = 0; i < numBlobs; i++ ) {
			results[i] = 0;
		}
		
		if( down ) {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexWork = labeled.startIndex + y*labeled.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexWork++ ) {
					if( (input.data[indexIn]) <= threshold ) {
						int val = labeled.data[indexWork];
						results[val] = val;
					}
				}
			}
		} else {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexWork = labeled.startIndex + y*labeled.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexWork++ ) {
					if( (input.data[indexIn]) >= threshold ) {
						int val = labeled.data[indexWork];
						results[val] = val;
					}
				}
			}
		}
	}

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-4 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel4( ImageSInt32 input , ImageSInt32 output ,
										int lowerThreshold , int upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];

		if( down ) {
			threshold(input,work,upperThreshold,true);
			int numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
			ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
			BinaryImageOps.relabel(output,relabel);
		} else {
			threshold(input,work,lowerThreshold,false);
			int numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
			BinaryImageOps.relabel(output,relabel);
		}

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-8 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel8( ImageSInt32 input , ImageSInt32 output ,
										int lowerThreshold , int upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];

		if( down ) {
			threshold(input,work,upperThreshold,true);
			int numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
			ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
			BinaryImageOps.relabel(output,relabel);
		} else {
			threshold(input,work,lowerThreshold,false);
			int numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
			BinaryImageOps.relabel(output,relabel);
		}

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}


}
