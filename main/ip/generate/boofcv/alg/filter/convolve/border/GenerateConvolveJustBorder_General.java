/*
 * Copyright (c) 2011-2013, Peter Abeles. All Rights Reserved.
 *
 * This file is part of BoofCV (http://boofcv.org).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package boofcv.alg.filter.convolve.border;

import boofcv.misc.CodeGeneratorUtil;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;

/**
 * Code generator for {@link ConvolveJustBorder_General}.  
 *
 * @author Peter Abeles
 */
public class GenerateConvolveJustBorder_General {

	String className = "ConvolveJustBorder_General";

	PrintStream out;

	String typeKernel;
	String typeInput;
	String typeOutput;
	String dataKernel;
	String dataOutput;
	String sumType;

	public void createAll() throws FileNotFoundException {
		out = new PrintStream(new FileOutputStream(className + ".java"));

		printPreamble();

		addF32_F32();
		addI_I16();
		addI_I32();

		out.println("}");
	}

	public void addF32_F32() throws FileNotFoundException {
		typeKernel = "F32";
		typeInput = "ImageBorder_F32";
		typeOutput = "ImageFloat32";
		dataKernel = "float";
		dataOutput = "float";
		sumType = "float";

		addMethods();
	}

	public void addI_I16() throws FileNotFoundException {
		typeKernel = "I32";
		typeInput = "ImageBorder_I";
		typeOutput = "ImageInt16";
		dataKernel = "int";
		dataOutput = "short";
		sumType = "int";

		addMethods();
	}

	public void addI_I32() throws FileNotFoundException {
		typeKernel = "I32";
		typeInput = "ImageBorder_I";
		typeOutput = "ImageSInt32";
		dataKernel = "int";
		dataOutput = "int";
		sumType = "int";

		addMethods();
	}


	public void printPreamble() {
		out.print(CodeGeneratorUtil.copyright);
		out.print("package boofcv.alg.filter.convolve.border;\n" +
				"\n" +
				"import boofcv.core.image.border.ImageBorder_F32;\n" +
				"import boofcv.core.image.border.ImageBorder_I;\n" +
				"import boofcv.struct.convolve.Kernel1D_F32;\n" +
				"import boofcv.struct.convolve.Kernel1D_I32;\n" +
				"import boofcv.struct.convolve.Kernel2D_F32;\n" +
				"import boofcv.struct.convolve.Kernel2D_I32;\n" +
				"import boofcv.struct.image.ImageFloat32;\n" +
				"import boofcv.struct.image.ImageInt16;\n" +
				"import boofcv.struct.image.ImageSInt32;\n" +
				"\n" +
				"/**\n" +
				" * <p>\n" +
				" * Convolves just the image's border.  How the border condition is handled is specified by the {@link boofcv.core.image.border.ImageBorder}\n" +
				" * passed in.  For 1D kernels only the horizontal or vertical borders are processed.\n" +
				" * </p>\n" +
				" * \n" +
				" * <p>\n" +
				" * WARNING: Do not modify.  Automatically generated by {@link GenerateConvolveJustBorder_General}.\n" +
				" * </p>\n" +
				" * \n" +
				" * @author Peter Abeles\n" +
				" */\n" +
				"public class ConvolveJustBorder_General {\n\n");
	}

	public void addMethods() {
		String typeCast = sumType.compareTo(dataOutput) != 0 ? "("+dataOutput+")" : "";

		addHorizontal(typeCast);
		addVertical(typeCast);
		addConvolution(typeCast);
	}

	public void addHorizontal( String typeCast ) {

		out.print("\tpublic static void horizontal(Kernel1D_"+typeKernel+" kernel, "+typeInput+" input, "+typeOutput+" output , int border ) {\n" +
				"\t\tfinal "+dataOutput+"[] dataDst = output.data;\n" +
				"\t\tfinal "+dataKernel+"[] dataKer = kernel.data;\n" +
				"\n" +
				"\t\tfinal int radius = kernel.getRadius();\n"+
				"\t\tfinal int width = output.getWidth();\n" +
				"\t\tfinal int height = output.getHeight();\n" +
				"\n" +
				"\t\tfor (int y = 0; y < height; y++) {\n" +
				"\t\t\tint indexDest = output.startIndex + y * output.stride;\n" +
				"\n" +
				"\t\t\tfor ( int x = 0; x < border; x++ ) {\n" +
				"\t\t\t\t"+sumType+" total = 0;\n" +
				"\t\t\t\tfor (int k = -radius; k <= radius; k++) {\n" +
				"\t\t\t\t\ttotal += input.get(x+k,y) * dataKer[k+radius];\n" +
				"\t\t\t\t}\n" +
				"\t\t\t\tdataDst[indexDest++] = "+typeCast+"total;\n" +
				"\t\t\t}\n" +
				"\n" +
				"\t\t\tindexDest = output.startIndex + y * output.stride + width-border;\n" +
				"\t\t\tfor ( int x = width-border; x < width; x++ ) {\n" +
				"\t\t\t\t"+sumType+" total = 0;\n" +
				"\t\t\t\tfor (int k = -radius; k <= radius; k++) {\n" +
				"\t\t\t\t\ttotal += input.get(x+k,y) * dataKer[k+radius];\n" +
				"\t\t\t\t}\n" +
				"\t\t\t\tdataDst[indexDest++] = "+typeCast+"total;\n" +
				"\t\t\t}\n" +
				"\t\t}\n" +
				"\t}\n\n");
	}

	public void addVertical( String typeCast ) {
		out.print("\tpublic static void vertical(Kernel1D_"+typeKernel+" kernel, "+typeInput+" input, "+typeOutput+" output , int border ) {\n" +
				"\t\tfinal "+dataOutput+"[] dataDst = output.data;\n" +
				"\t\tfinal "+dataKernel+"[] dataKer = kernel.data;\n" +
				"\n" +
				"\t\tfinal int radius = kernel.getRadius();\n"+
				"\t\tfinal int width = output.getWidth();\n" +
				"\t\tfinal int height = output.getHeight();\n" +
				"\n" +
				"\t\tfor ( int x = 0; x < width; x++ ) {\n" +
				"\t\t\tint indexDest = output.startIndex + x;\n" +
				"\n" +
				"\t\t\tfor (int y = 0; y < border; y++, indexDest += output.stride) {\n" +
				"\t\t\t\t"+sumType+" total = 0;\n" +
				"\t\t\t\tfor (int k = -radius; k <= radius; k++) {\n" +
				"\t\t\t\t\ttotal += input.get(x,y+k) * dataKer[k+radius];\n" +
				"\t\t\t\t}\n" +
				"\t\t\t\tdataDst[indexDest] = "+typeCast+"total;\n" +
				"\t\t\t}\n" +
				"\n" +
				"\t\t\tindexDest = output.startIndex + (height-border) * output.stride + x;\n" +
				"\t\t\tfor (int y = height-border; y < height; y++, indexDest += output.stride) {\n" +
				"\t\t\t\t"+sumType+" total = 0;\n" +
				"\t\t\t\tfor (int k = -radius; k <= radius; k++ ) {\n" +
				"\t\t\t\t\ttotal += input.get(x,y+k) * dataKer[k+radius];\n" +
				"\t\t\t\t}\n" +
				"\t\t\t\tdataDst[indexDest] = "+typeCast+"total;\n" +
				"\t\t\t}\n" +
				"\t\t}\n" +
				"\t}\n\n");
	}

	public void addConvolution( String typeCast ) {
		out.print("\tpublic static void convolve(Kernel2D_"+typeKernel+" kernel, "+typeInput+" input, "+typeOutput+" output , int border ) {\n" +
				"\t\tfinal "+dataOutput+"[] dataDst = output.data;\n" +
				"\t\tfinal "+dataKernel+"[] dataKer = kernel.data;\n" +
				"\n" +
				"\t\tfinal int radius = kernel.getRadius();\n"+
				"\t\tfinal int width = output.getWidth();\n" +
				"\t\tfinal int height = output.getHeight();\n" +
				"\n" +
				"\t\t// convolve along the left and right borders\n" +
				"\t\tfor (int y = 0; y < height; y++) {\n" +
				"\t\t\tint indexDest = output.startIndex + y * output.stride;\n" +
				"\n" +
				"\t\t\tfor ( int x = 0; x < border; x++ ) {\n" +
				"\t\t\t\t"+sumType+" total = 0;\n" +
				"\t\t\t\tint indexKer = 0;\n" +
				"\t\t\t\tfor( int i = -radius; i <= radius; i++ ) {\n" +
				"\t\t\t\t\tfor (int j = -radius; j <= radius; j++) {\n" +
				"\t\t\t\t\t\ttotal += input.get(x+j,y+i) * dataKer[indexKer++];\n" +
				"\t\t\t\t\t}\n" +
				"\t\t\t\t}\n" +
				"\t\t\t\tdataDst[indexDest++] = "+typeCast+"total;\n" +
				"\t\t\t}\n" +
				"\n" +
				"\t\t\tindexDest = output.startIndex + y * output.stride + width-border;\n" +
				"\t\t\tfor ( int x = width-border; x < width; x++ ) {\n" +
				"\t\t\t\t"+sumType+" total = 0;\n" +
				"\t\t\t\tint indexKer = 0;\n" +
				"\t\t\t\tfor( int i = -radius; i <= radius; i++ ) {\n" +
				"\t\t\t\t\tfor (int j = -radius; j <= radius; j++) {\n" +
				"\t\t\t\t\t\ttotal += input.get(x+j,y+i) * dataKer[indexKer++];\n" +
				"\t\t\t\t\t}\n" +
				"\t\t\t\t}\n" +
				"\t\t\t\tdataDst[indexDest++] = "+typeCast+"total;\n" +
				"\t\t\t}\n" +
				"\t\t}\n" +
				"\n" +
				"\t\t// convolve along the top and bottom borders\n" +
				"\t\tfor ( int x = border; x < width-border; x++ ) {\n" +
				"\t\t\tint indexDest = output.startIndex + x;\n" +
				"\n" +
				"\t\t\tfor (int y = 0; y < border; y++, indexDest += output.stride) {\n" +
				"\t\t\t\t"+sumType+" total = 0;\n" +
				"\t\t\t\tint indexKer = 0;\n" +
				"\t\t\t\tfor( int i = -radius; i <= radius; i++ ) {\n" +
				"\t\t\t\t\tfor (int j = -radius; j <= radius; j++) {\n" +
				"\t\t\t\t\t\ttotal += input.get(x+j,y+i) * dataKer[indexKer++];\n" +
				"\t\t\t\t\t}\n" +
				"\t\t\t\t}\n" +
				"\t\t\t\tdataDst[indexDest] = "+typeCast+"total;\n" +
				"\t\t\t}\n" +
				"\n" +
				"\t\t\tindexDest = output.startIndex + (height-border) * output.stride + x;\n" +
				"\t\t\tfor (int y = height-border; y < height; y++, indexDest += output.stride) {\n" +
				"\t\t\t\t"+sumType+" total = 0;\n" +
				"\t\t\t\tint indexKer = 0;\n" +
				"\t\t\t\tfor( int i = -radius; i <= radius; i++ ) {\n" +
				"\t\t\t\t\tfor (int j = -radius; j <= radius; j++) {\n" +
				"\t\t\t\t\t\ttotal += input.get(x+j,y+i) * dataKer[indexKer++];\n" +
				"\t\t\t\t\t}\n" +
				"\t\t\t\t}\n" +
				"\t\t\t\tdataDst[indexDest] = "+typeCast+"total;\n" +
				"\t\t\t}\n" +
				"\t\t}\n" +
				"\t}\n\n");
	}

	public static void main( String args[] ) throws FileNotFoundException {
		GenerateConvolveJustBorder_General generator = new GenerateConvolveJustBorder_General();
		generator.createAll();
	}
}
